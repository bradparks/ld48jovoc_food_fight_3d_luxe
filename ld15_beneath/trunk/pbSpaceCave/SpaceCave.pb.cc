// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SpaceCave.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace pbSpaceCave {

namespace {

const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChatPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdentityPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdentityPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSettingsPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSettingsPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPlayerPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPlayerPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SpaceCave_2eproto() {
  protobuf_AddDesc_SpaceCave_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SpaceCave.proto");
  GOOGLE_CHECK(file != NULL);
  Packet_descriptor_ = file->message_type(0);
  static const int Packet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, addplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, pset_),
  };
  Packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet));
  Packet_Type_descriptor_ = Packet_descriptor_->enum_type(0);
  ChatPacket_descriptor_ = file->message_type(1);
  static const int ChatPacket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPacket, message_),
  };
  ChatPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatPacket_descriptor_,
      ChatPacket::default_instance_,
      ChatPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatPacket));
  IdentityPacket_descriptor_ = file->message_type(2);
  static const int IdentityPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentityPacket, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentityPacket, playername_),
  };
  IdentityPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IdentityPacket_descriptor_,
      IdentityPacket::default_instance_,
      IdentityPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentityPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentityPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IdentityPacket));
  PlayerSettingsPacket_descriptor_ = file->message_type(3);
  static const int PlayerSettingsPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSettingsPacket, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSettingsPacket, playername_),
  };
  PlayerSettingsPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSettingsPacket_descriptor_,
      PlayerSettingsPacket::default_instance_,
      PlayerSettingsPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSettingsPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSettingsPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSettingsPacket));
  AddPlayerPacket_descriptor_ = file->message_type(4);
  static const int AddPlayerPacket_offsets_[1] = {
  };
  AddPlayerPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPlayerPacket_descriptor_,
      AddPlayerPacket::default_instance_,
      AddPlayerPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPlayerPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SpaceCave_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_descriptor_, &Packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatPacket_descriptor_, &ChatPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IdentityPacket_descriptor_, &IdentityPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSettingsPacket_descriptor_, &PlayerSettingsPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPlayerPacket_descriptor_, &AddPlayerPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SpaceCave_2eproto() {
  delete Packet::default_instance_;
  delete Packet_reflection_;
  delete ChatPacket::default_instance_;
  delete ChatPacket_reflection_;
  delete IdentityPacket::default_instance_;
  delete IdentityPacket_reflection_;
  delete PlayerSettingsPacket::default_instance_;
  delete PlayerSettingsPacket_reflection_;
  delete AddPlayerPacket::default_instance_;
  delete AddPlayerPacket_reflection_;
}

void protobuf_AddDesc_SpaceCave_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SpaceCave.proto\022\013pbSpaceCave\"\254\002\n\006Packe"
    "t\022&\n\004type\030\001 \002(\0162\030.pbSpaceCave.Packet.Typ"
    "e\022%\n\004chat\030\002 \001(\0132\027.pbSpaceCave.ChatPacket"
    "\022/\n\taddPlayer\030\003 \001(\0132\034.pbSpaceCave.AddPla"
    "yerPacket\022-\n\010identity\030\004 \001(\0132\033.pbSpaceCav"
    "e.IdentityPacket\022/\n\004pset\030\005 \001(\0132!.pbSpace"
    "Cave.PlayerSettingsPacket\"B\n\004Type\022\010\n\004CHA"
    "T\020\001\022\014\n\010IDENTITY\020\002\022\016\n\nADD_PLAYER\020\003\022\022\n\016PLA"
    "YERSETTINGS\020\004\"\035\n\nChatPacket\022\017\n\007message\030\001"
    " \001(\t\"3\n\016IdentityPacket\022\r\n\005index\030\001 \002(\r\022\022\n"
    "\nplayerName\030\002 \001(\t\"9\n\024PlayerSettingsPacke"
    "t\022\r\n\005index\030\001 \002(\r\022\022\n\nplayerName\030\002 \001(\t\"\021\n\017"
    "AddPlayerPacket", 495);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SpaceCave.proto", &protobuf_RegisterTypes);
  Packet::default_instance_ = new Packet();
  ChatPacket::default_instance_ = new ChatPacket();
  IdentityPacket::default_instance_ = new IdentityPacket();
  PlayerSettingsPacket::default_instance_ = new PlayerSettingsPacket();
  AddPlayerPacket::default_instance_ = new AddPlayerPacket();
  Packet::default_instance_->InitAsDefaultInstance();
  ChatPacket::default_instance_->InitAsDefaultInstance();
  IdentityPacket::default_instance_->InitAsDefaultInstance();
  PlayerSettingsPacket::default_instance_->InitAsDefaultInstance();
  AddPlayerPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SpaceCave_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SpaceCave_2eproto {
  StaticDescriptorInitializer_SpaceCave_2eproto() {
    protobuf_AddDesc_SpaceCave_2eproto();
  }
} static_descriptor_initializer_SpaceCave_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Packet_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Type_descriptor_;
}
bool Packet_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Type Packet::CHAT;
const Packet_Type Packet::IDENTITY;
const Packet_Type Packet::ADD_PLAYER;
const Packet_Type Packet::PLAYERSETTINGS;
const Packet_Type Packet::Type_MIN;
const Packet_Type Packet::Type_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet::kTypeFieldNumber;
const int Packet::kChatFieldNumber;
const int Packet::kAddPlayerFieldNumber;
const int Packet::kIdentityFieldNumber;
const int Packet::kPsetFieldNumber;
#endif  // !_MSC_VER

Packet::Packet() {
  SharedCtor();
}

void Packet::InitAsDefaultInstance() {
  chat_ = const_cast< ::pbSpaceCave::ChatPacket*>(&::pbSpaceCave::ChatPacket::default_instance());
  addplayer_ = const_cast< ::pbSpaceCave::AddPlayerPacket*>(&::pbSpaceCave::AddPlayerPacket::default_instance());
  identity_ = const_cast< ::pbSpaceCave::IdentityPacket*>(&::pbSpaceCave::IdentityPacket::default_instance());
  pset_ = const_cast< ::pbSpaceCave::PlayerSettingsPacket*>(&::pbSpaceCave::PlayerSettingsPacket::default_instance());
}

Packet::Packet(const Packet& from) {
  SharedCtor();
  MergeFrom(from);
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  chat_ = NULL;
  addplayer_ = NULL;
  identity_ = NULL;
  pset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != default_instance_) {
    delete chat_;
    delete addplayer_;
    delete identity_;
    delete pset_;
  }
}

const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpaceCave_2eproto();  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New() const {
  return new Packet;
}

void Packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (_has_bit(1)) {
      if (chat_ != NULL) chat_->::pbSpaceCave::ChatPacket::Clear();
    }
    if (_has_bit(2)) {
      if (addplayer_ != NULL) addplayer_->::pbSpaceCave::AddPlayerPacket::Clear();
    }
    if (_has_bit(3)) {
      if (identity_ != NULL) identity_->::pbSpaceCave::IdentityPacket::Clear();
    }
    if (_has_bit(4)) {
      if (pset_ != NULL) pset_->::pbSpaceCave::PlayerSettingsPacket::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbSpaceCave.Packet.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::pbSpaceCave::Packet_Type_IsValid(value)) {
          set_type(static_cast< ::pbSpaceCave::Packet_Type >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(18)) goto parse_chat;
        break;
      }
      
      // optional .pbSpaceCave.ChatPacket chat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_chat:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_chat()));
        if (input->ExpectTag(26)) goto parse_addPlayer;
        break;
      }
      
      // optional .pbSpaceCave.AddPlayerPacket addPlayer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_addPlayer:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_addplayer()));
        if (input->ExpectTag(34)) goto parse_identity;
        break;
      }
      
      // optional .pbSpaceCave.IdentityPacket identity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_identity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_identity()));
        if (input->ExpectTag(42)) goto parse_pset;
        break;
      }
      
      // optional .pbSpaceCave.PlayerSettingsPacket pset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pset:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_pset()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Packet::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .pbSpaceCave.Packet.Type type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .pbSpaceCave.ChatPacket chat = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->chat(), output);
  }
  
  // optional .pbSpaceCave.AddPlayerPacket addPlayer = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->addplayer(), output);
  }
  
  // optional .pbSpaceCave.IdentityPacket identity = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->identity(), output);
  }
  
  // optional .pbSpaceCave.PlayerSettingsPacket pset = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->pset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbSpaceCave.Packet.Type type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .pbSpaceCave.ChatPacket chat = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chat(), target);
  }
  
  // optional .pbSpaceCave.AddPlayerPacket addPlayer = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->addplayer(), target);
  }
  
  // optional .pbSpaceCave.IdentityPacket identity = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->identity(), target);
  }
  
  // optional .pbSpaceCave.PlayerSettingsPacket pset = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbSpaceCave.Packet.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .pbSpaceCave.ChatPacket chat = 2;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat());
    }
    
    // optional .pbSpaceCave.AddPlayerPacket addPlayer = 3;
    if (has_addplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addplayer());
    }
    
    // optional .pbSpaceCave.IdentityPacket identity = 4;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->identity());
    }
    
    // optional .pbSpaceCave.PlayerSettingsPacket pset = 5;
    if (has_pset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      mutable_chat()->::pbSpaceCave::ChatPacket::MergeFrom(from.chat());
    }
    if (from._has_bit(2)) {
      mutable_addplayer()->::pbSpaceCave::AddPlayerPacket::MergeFrom(from.addplayer());
    }
    if (from._has_bit(3)) {
      mutable_identity()->::pbSpaceCave::IdentityPacket::MergeFrom(from.identity());
    }
    if (from._has_bit(4)) {
      mutable_pset()->::pbSpaceCave::PlayerSettingsPacket::MergeFrom(from.pset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_identity()) {
    if (!this->identity().IsInitialized()) return false;
  }
  if (has_pset()) {
    if (!this->pset().IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(chat_, other->chat_);
    std::swap(addplayer_, other->addplayer_);
    std::swap(identity_, other->identity_);
    std::swap(pset_, other->pset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ChatPacket::_default_message_;
#ifndef _MSC_VER
const int ChatPacket::kMessageFieldNumber;
#endif  // !_MSC_VER

ChatPacket::ChatPacket() {
  SharedCtor();
}

void ChatPacket::InitAsDefaultInstance() {
}

ChatPacket::ChatPacket(const ChatPacket& from) {
  SharedCtor();
  MergeFrom(from);
}

void ChatPacket::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatPacket::~ChatPacket() {
  SharedDtor();
}

void ChatPacket::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ChatPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatPacket_descriptor_;
}

const ChatPacket& ChatPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpaceCave_2eproto();  return *default_instance_;
}

ChatPacket* ChatPacket::default_instance_ = NULL;

ChatPacket* ChatPacket::New() const {
  return new ChatPacket;
}

void ChatPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_message()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->message().data(), this->message().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ChatPacket::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string message = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ChatPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatPacket::MergeFrom(const ChatPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatPacket::CopyFrom(const ChatPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatPacket::IsInitialized() const {
  
  return true;
}

void ChatPacket::Swap(ChatPacket* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatPacket_descriptor_;
  metadata.reflection = ChatPacket_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string IdentityPacket::_default_playername_;
#ifndef _MSC_VER
const int IdentityPacket::kIndexFieldNumber;
const int IdentityPacket::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

IdentityPacket::IdentityPacket() {
  SharedCtor();
}

void IdentityPacket::InitAsDefaultInstance() {
}

IdentityPacket::IdentityPacket(const IdentityPacket& from) {
  SharedCtor();
  MergeFrom(from);
}

void IdentityPacket::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdentityPacket::~IdentityPacket() {
  SharedDtor();
}

void IdentityPacket::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IdentityPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdentityPacket_descriptor_;
}

const IdentityPacket& IdentityPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpaceCave_2eproto();  return *default_instance_;
}

IdentityPacket* IdentityPacket::default_instance_ = NULL;

IdentityPacket* IdentityPacket::New() const {
  return new IdentityPacket;
}

void IdentityPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (_has_bit(1)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IdentityPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &index_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }
      
      // optional string playerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_playerName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_playername()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->playername().data(), this->playername().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IdentityPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    IdentityPacket::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // optional string playerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IdentityPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // optional string playerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IdentityPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void IdentityPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IdentityPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IdentityPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IdentityPacket::MergeFrom(const IdentityPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_index(from.index());
    }
    if (from._has_bit(1)) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IdentityPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentityPacket::CopyFrom(const IdentityPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentityPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void IdentityPacket::Swap(IdentityPacket* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IdentityPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdentityPacket_descriptor_;
  metadata.reflection = IdentityPacket_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PlayerSettingsPacket::_default_playername_;
#ifndef _MSC_VER
const int PlayerSettingsPacket::kIndexFieldNumber;
const int PlayerSettingsPacket::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

PlayerSettingsPacket::PlayerSettingsPacket() {
  SharedCtor();
}

void PlayerSettingsPacket::InitAsDefaultInstance() {
}

PlayerSettingsPacket::PlayerSettingsPacket(const PlayerSettingsPacket& from) {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSettingsPacket::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  playername_ = const_cast< ::std::string*>(&_default_playername_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSettingsPacket::~PlayerSettingsPacket() {
  SharedDtor();
}

void PlayerSettingsPacket::SharedDtor() {
  if (playername_ != &_default_playername_) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PlayerSettingsPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSettingsPacket_descriptor_;
}

const PlayerSettingsPacket& PlayerSettingsPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpaceCave_2eproto();  return *default_instance_;
}

PlayerSettingsPacket* PlayerSettingsPacket::default_instance_ = NULL;

PlayerSettingsPacket* PlayerSettingsPacket::New() const {
  return new PlayerSettingsPacket;
}

void PlayerSettingsPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (_has_bit(1)) {
      if (playername_ != &_default_playername_) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSettingsPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &index_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }
      
      // optional string playerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_playerName:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_playername()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->playername().data(), this->playername().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSettingsPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PlayerSettingsPacket::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // optional string playerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSettingsPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // optional string playerName = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSettingsPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PlayerSettingsPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSettingsPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSettingsPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSettingsPacket::MergeFrom(const PlayerSettingsPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_index(from.index());
    }
    if (from._has_bit(1)) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSettingsPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSettingsPacket::CopyFrom(const PlayerSettingsPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSettingsPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerSettingsPacket::Swap(PlayerSettingsPacket* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSettingsPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSettingsPacket_descriptor_;
  metadata.reflection = PlayerSettingsPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AddPlayerPacket::AddPlayerPacket() {
  SharedCtor();
}

void AddPlayerPacket::InitAsDefaultInstance() {
}

AddPlayerPacket::AddPlayerPacket(const AddPlayerPacket& from) {
  SharedCtor();
  MergeFrom(from);
}

void AddPlayerPacket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPlayerPacket::~AddPlayerPacket() {
  SharedDtor();
}

void AddPlayerPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AddPlayerPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPlayerPacket_descriptor_;
}

const AddPlayerPacket& AddPlayerPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpaceCave_2eproto();  return *default_instance_;
}

AddPlayerPacket* AddPlayerPacket::default_instance_ = NULL;

AddPlayerPacket* AddPlayerPacket::New() const {
  return new AddPlayerPacket;
}

void AddPlayerPacket::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPlayerPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AddPlayerPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AddPlayerPacket::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPlayerPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPlayerPacket::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AddPlayerPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPlayerPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPlayerPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPlayerPacket::MergeFrom(const AddPlayerPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPlayerPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlayerPacket::CopyFrom(const AddPlayerPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayerPacket::IsInitialized() const {
  
  return true;
}

void AddPlayerPacket::Swap(AddPlayerPacket* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPlayerPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPlayerPacket_descriptor_;
  metadata.reflection = AddPlayerPacket_reflection_;
  return metadata;
}


}  // namespace pbSpaceCave
